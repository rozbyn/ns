<?php

namespace RozbynDev\BonusSystem;

use JsonException;
use RozbynDev\Api\Telegram;
use RozbynDev\Helper\Logger;
use RozbynDev\Helper\Path;

class AnswersMaker
{

    protected bool $needSendDefaultAnswer = true;
    protected static string $webAppUrl;


    public function __construct(
        protected Client $client,
        protected array $data,

    ) {
    }


    /**
     * @return string
     */
    public static function getWebAppUrl(): string
    {
        return self::$webAppUrl;
    }

    /**
     * @param string $webAppUrl
     */
    public static function setWebAppUrl(string $webAppUrl): void
    {
        self::$webAppUrl = $webAppUrl;
    }


    public function makeAnswer()
    {
        $this->checkCommandsAndCallbacks();
        if (is_null($this->client->getName())) {
            if ($this->client->getNextAnswerType() === 'name') {
                $this->saveClientName();
            }
            if (is_null($this->client->getName())) {
                return $this->askClientName();
            }
        }
        if (empty($this->client->getPhone())) {
            if ($this->client->getNextAnswerType() === 'phone' && $this->saveClientPhone()) {
                $this->sendSuccessRegisterMessage();
            }
            if (empty($this->client->getPhone())) {
                return $this->askClientPhone();
            }
        }
        return $this->needSendDefaultAnswer ? $this->sendDefaultMessage() : true;
    }

    public function sendMessage(array $params)
    {
        $params['chat_id'] = $this->client->getId();
        return Telegram::call('sendMessage', $params);
    }


    public static function getFirstMetParams(): array
    {
        return [
            'text' => '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–µ. '
                . '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ-–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏ –±–æ—Ç–∞ –≤–∞–º –Ω—É–∂–Ω–æ '
                . '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, —É–∫–∞–∑–∞–≤ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.',
        ];
    }


    public function sendSuccessRegisterMessage(): array
    {
        return $this->sendMessage([
            'text' => '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å',
        ]);
    }


    public function askClientName(): array
    {
        $params = [
            'text' => '–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?',
            'reply_markup' => [
                'force_reply' => true,
                'input_field_placeholder' => '–ò–º—è',
                'selective' => false,
            ],
        ];
        $sendResult = $this->sendMessage($params);
        if ($sendResult['ok'] === true && $sendResult['result']['message_id'] > 0) {
            $this->client->setNextAnswerType('name');
            $this->client->save();
        }
        return $sendResult;
    }

    public function saveClientName()
    {
        $mayBeName = $this->data['message']['text'];
        $re = '/^[–∞-—è–ê-–Ø—ë–Å a-zA-Z]{2,}$/u';
        if (preg_match($re, $mayBeName)) {
            $mayBeName = mb_convert_case($mayBeName, MB_CASE_TITLE, 'UTF-8');
            $this->client->setName($mayBeName);
            $this->client->setNextAnswerType('');
            $this->client->save();
            $this->sendMessage(['text' => '–†–∞–¥—ã –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É, ' . $mayBeName]);
        } else {
            $this->sendMessage(['text' => '–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–º—è)']);
        }
    }

    public function saveClientPhone()
    {
        $phone = '';
        if (
            !empty($this->data['message']['contact']['phone_number'])
            && $this->data['message']['contact']['user_id'] === $this->client->getId()
        ) {
            $phone = preg_replace('/\D/', '', $this->data['message']['contact']['phone_number']);
        } elseif (preg_match('/^7\d{10}$/', $this->data['message']['text'])) {
            $phone = $this->data['message']['text'];
        }
        if (!empty($phone)) {
            $this->client->setPhone($phone);
            $this->client->setNextAnswerType('');
            $this->client->save();
            $this->sendMessage([
                'text' => '–ü—Ä–∏–Ω—è—Ç–æ! –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: ' . $phone,
                'reply_markup' => ['remove_keyboard' => true],
            ]);
            return true;
        }
        $this->sendMessage(['text' => '–ù–æ–º–µ—Ä –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω(']);
        return false;
    }


    public function askClientPhone()
    {
        $params = [
            'text' => '–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞? '
                . '–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ Telegram", '
                . '–ª–∏–±–æ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ü–∏—Ñ—Ä—ã "7", –∑–∞—Ç–µ–º 10 —Ü–∏—Ñ—Ä)',
            'reply_markup' => [
                'force_reply' => true,
                'input_field_placeholder' => '70009990099',
                'selective' => false,
                'keyboard' => [
                    [['text' => '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ Telegram', 'request_contact' => true]],
                ],
                'one_time_keyboard' => true,
            ],
        ];
        $sendResult = $this->sendMessage($params);
        if ($sendResult['ok'] === true && $sendResult['result']['message_id'] > 0) {
            $this->client->setNextAnswerType('phone');
            $this->client->save();
        }
        return $sendResult;
    }

    public function sendDefaultMessage()
    {
        return $this->sendMessage([
            'text' => '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-–±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ',
            'reply_markup' => $this->getDefaultInlineKeyboardConfig(),
        ]);
    }


    public function getDefaultInlineKeyboardConfig()
    {
        return [
            'inline_keyboard' => [
                [
                    ['text' => '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ üë§', 'callback_data' => 'showAccountInfo'],
                    ['text' => '–ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π üìà', 'callback_data' => 'showHistory'],
                ],
            ],
        ];
    }

    public function checkCommandsAndCallbacks(): void
    {
        foreach ($this->getCommandsData() as $commandName => $commandParams) {
            $this->handleCommand($commandName, $commandParams);
        }
        $this->handleCallbacks();
    }


    public function getCommandsData(): array
    {
        $commands = [];
        if (!empty($this->data['message']['entities']) && !empty($this->data['message']['text'])) {
            foreach ($this->data['message']['entities'] as $entity) {
                if ($entity['type'] === 'bot_command') {
                    $cmd = mb_substr($this->data['message']['text'], $entity['offset'], $entity['length']);
                    $commands[$cmd] = $entity;
                }
            }
        }
        return $commands;
    }

    public function handleCommand(string $commandName, array $commandParams)
    {
        switch ($commandName) {
            case '/start':
                if (is_string($this->client->getName()) && is_string($this->client->getPhone())) {
                    $messageParams = [];
                    $messageParams['text'] = '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, ' . $this->client->getName()
                        . '. –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ' . $this->client->getPhone(
                        ) . '. –ú–æ–∂–µ—Ç–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.';
                    $this->sendMessage($messageParams);
                }
                break;
            case '/forgetme':
                if (Client::deleteById($this->client->getId())) {
                    $this->sendMessage(['text' => '–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å—Ç–µ—Ä—Ç–∞ –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö']);
                    exit;
                }
                break;
            case '/settings':
                $this->sendMessage([
                    'text' => '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                    'reply_markup' => [
                        'inline_keyboard' => [
                            [
                                [
                                    'text' =>'–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                                    'web_app' => ['url' => self::getWebAppUrl()]
                                ],
                            ],
                        ],
                    ]
                ]);
                $this->needSendDefaultAnswer = false;
                break;
            default:
                break;
        }
    }

    public function handleCallbacks()
    {
        if (empty($this->data['callback_query']['data'])) {
            return;
        }
        switch ($this->data['callback_query']['data']) {
            case 'showAccountInfo':
                $this->editCallbackMessageText(
                     '–ò–º—è: ' . $this->client->getName() . PHP_EOL
                    . '–¢–µ–ª–µ—Ñ–æ–Ω: ' . $this->client->getPhone(). PHP_EOL
                    . '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤: ' . ($this->client->getBonusCount()??0). PHP_EOL
                    . '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏–∏: ' . $this->client->getCreateDate()->format('d.m.Y H:i:s'). PHP_EOL
                    . '–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ' . $this->client->getModifyDate()->format('d.m.Y H:i:s')
                );
                $this->answerCallback('üëç');
                $this->needSendDefaultAnswer = false;
                break;
            case 'showHistory':
                $this->editCallbackMessageText(
                     '+ 17 –±–æ–Ω—É—Å–æ–≤, 29.04.2019 19:55'.PHP_EOL
                    .'+ 39 –±–æ–Ω—É—Å–æ–≤, 04.05.2019 13:37'.PHP_EOL
                    .'+ 12 –±–æ–Ω—É—Å–æ–≤, 19.06.2023 15:09'.PHP_EOL
                    .'- 68 –±–æ–Ω—É—Å–æ–≤, 13.02.2024 19:00'.PHP_EOL
                );
                $this->answerCallback('üëç');
                $this->needSendDefaultAnswer = false;

        }
    }


    public function editCallbackMessageText(string $newText)
    {
        if ($this->data['callback_query']['message']['text'] !== $newText) {
            Telegram::call('editMessageText', [
                'message_id' => $this->data['callback_query']['message']['message_id'],
                'chat_id' => $this->data['callback_query']['message']['chat']['id'],
                'text' => $newText,
                'reply_markup' => $this->getDefaultInlineKeyboardConfig(),
            ]);
        }
    }


    /**
     * @param string|null $text
     * @param bool $showAlert
     * @param string|null $url
     * @return array|null
     * @throws JsonException
     */
    public function answerCallback(?string $text = null, bool $showAlert = false, ?string $url = null): ?array
    {
        if (empty($this->data['callback_query']['id'])) {
            return null;
        }
        $params = ['callback_query_id' => $this->data['callback_query']['id']];
        if (!is_null($text)) {
            $params['text'] = $text;
        }
        if ($showAlert) {
            $params['show_alert'] = true;
        }
        if (!is_null($url)) {
            $params['url'] = $url;
        }
        return Telegram::call('answerCallbackQuery', $params);
    }


}


