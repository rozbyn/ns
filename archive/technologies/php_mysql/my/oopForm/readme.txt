Класс Inputform представляет собой попытку автоматизировать рутинные действия PHP программиста при работе с HTML формами.
При написании класса преследовались цели создать простой и в то же время гибкий инструмент, призванный сэкономить 
время программиста и длину кода.
В классе реализованы функции:
 - Сохранения значений полей и переключателей после отправки формы;
 - Проверка на обязательность заполнения и отображение сообщения об ошибке (в одном div'е с элементом);
 - Валидация текстовых полей регулярным выражением и отображение сообщения об ошибке;
 - Сохранение файлов из input type="file" в выбранную папку;
 - Возможность показывать HTML код элементов вне тега <form> и не терять их связь с формой(с помощью тега form="formId");
Реализация не претендует на идеальную. Отзывы и предложения можно отправлять по адресу rozbyn@yandex.ru

↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
Создание элементов↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓

Создание экземпляра класса.
---------------------------------------------------------------------------------------------
__construct($action='', $method='GET', $tags=[], $formId='form', $enctype = 'application/x-www-form-urlencoded')
Принимает 5 не обязательных параметров:
1: 	(string)$action - значение будет записано в атрибут action формы.
	По умолчанию пустая строка;
2: 	(string)$method - значение будет записано в атрибут method формы.
	Принимает значения либо "POST" либо "GET", по умолчанию "GET".
3:	(array)$tags - ассоциативный массив с атрибутами и значениями, будут
	записаны как атрибуты формы, по умолчанию пустой массив.
	Пример массива ['class'=>'example'].
4:	(string)$formId - атрибут ID для формы, так же это значение будет использоваться
	для атрибутов form тегов input (если включена эта опция). По умолчанию "form".
5:	(string)$enctype - значение атрибута enctype формы. 
	По умолчанию 'application/x-www-form-urlencoded'. При создании элемента для ввода файлов
	автоматически меняется на 'multipart/form-data'.
Пример использования:
	$inputForm = new Inputform('','POST', ['class'=>'example'], 'form123');
Возвращаемых значений нет.
---------------------------------------------------------------------------------------------


Получение ID последнего созданного элемента
---------------------------------------------------------------------------------------------
$something = $inputForm->id;
Это свойство класса нежелательно переопределять.
Для корректной работы класс использует массив formContent, ключами которого
являются ID. ID это числовое значение которое однозначно определяет какой-либо 
созданный элемент. Изначально id=0. Создание элемента запускает функцию setId которая
увеличивает id на 1($id++), затем этот id присваивается элементу.
Возвращает число типа integer.
---------------------------------------------------------------------------------------------


Создание обычного текстового поля
---------------------------------------------------------------------------------------------
addTextInput($tagName, $saveFormValue = false, $tags=[], $required = false, $validate=false, $validateErrorMessage='Поле заполнено неверно', $type='text')
Принимает 1 обязательный и 6 не обязательных параметров:
1:	(string)$tagName - значение атрибута name поля ввода. Обязательный параметр.
2:	(bool)$saveFormValue - опция сохранения введенных значений после отправки формы,
	булево значение, true - для сохранения, false - значения не будут сохранятся.
3:	(array)$tags - ассоциативный массив с атрибутами и значениями, будут
	записаны как атрибуты поля, по умолчанию пустой массив.
	Пример массива ['class'=>'example'].
4:	(bool/string)$required - обязательно ли поле для заполнения. Принимает булево значение false
	если поле не обязательно для заполнения, либо строку с текстом сообщения об ошибке заполнения (можно вставлять HTML теги).
	Так-же если передана строка, то к HTML коду поля добавляется атрибут required (в целях отладки это 
	можно изменить передав свойству $inputForm->requiredText пустую стоку).
5:	(bool/string)$validate - нужна ли валидация введенных значений. Принимает булево значение false
	если валидация не нужна, либо строку с названием типа валидации. Возможные значения: "Login", "Password", "Email", "Custom".
	Если указано одно из этих трех значений скрипт вызывает соответствующую функцию validateLogin, validatePassword, validateEmail, validateCustom
	которые используют для валидации переменные validateLoginRegEx, validatePasswordRegEx, validateCustomRegEx
	в которых хранятся регулярные выражения, которые можно переопределить. Например так: $inputForm->validateLoginRegEx = '#.{10,30}$#iu'.
	Функция validateEmail не использует регулярное выражение, валидация производится с помощью встроенной функции filter_var с флагом FILTER_VALIDATE_EMAIL.
6:	(string)$validateErrorMessage - сообщение, которое будет показано в случае ошибки валидации (можно вставлять HTML теги).
7:	(string)$type - принимает значения "text", "password", "email". По умолчанию "text". Этот параметр не желательно передавать явно,
	т.к. он передается другими функциями, которые используют addTextInput как базовую функцию. Значение этого параметра будет записано
	в атрибут type текстового поля.
Пример использования: 
	$textInput = $inputForm->addTextInput('textfield1', true, ['placeholder'=>'Login'], 'Заполните это поле!', 'Custom', 'Не менее 10 символов<br>и не более 30!');
Возвращаемые значения:
	-(bool)false - если форма не была отправлена
	-(string) - текст введенный пользователем в поле, если форма была отправлена и нет ошибок валидации и/или заполнения
	-(bool)false - если форма была отправлена, в поле ничего не введено и в параметр функции $required была передана строка
	-(bool)false - если форма была отправлена, в поле введен какой-то текст, но текст не прошел валидацию
	-(array) - Если параметр type отличный от "text", то возвращается массив с двумя элементами. 
	В элементе с ключом 'id' передается внутренний ID созданного поля, в элементе с ключем 'value' передается само значение поля (false/string).
---------------------------------------------------------------------------------------------


Создание поля типа password
---------------------------------------------------------------------------------------------
addPasswordInput($tagName, $saveFormValue = false, $tags=[], $required = false, $validate=false, $validateErrorMessage='Поле заполнено неверно', $passNeedСonfirm = false, $passConfirmMesssage='Пароли не совпадают!')
Эта функция использует функцию addTextInput как базовую, по этому
большинство передаваемых параметров идентично с функцией addTextInput.
Принимает 1 обязательный параметр и 7 не обязательных:
1:	(string)$tagName - значение атрибута name поля ввода. Обязательный параметр.
2:	(bool)$saveFormValue - опция сохранения введенных значений после отправки формы,
	булево значение, true - для сохранения, false - значения не будут сохранятся.
3:	(array)$tags - ассоциативный массив с атрибутами и значениями, будут
	записаны как атрибуты поля, по умолчанию пустой массив.
	Пример массива ['class'=>'example'].
4:	(bool/string)$required - идентично с аналогичным параметром функции addTextInput.
5:	(bool/string)$validate - идентично с аналогичным параметром функции addTextInput.
6:	(string)$validateErrorMessage - идентично с аналогичным параметром функции addTextInput.
7:	(bool/int) $passNeedСonfirm - параметр принимает булево false если пароль не нужно сравнивать
	с другим полем типа password или принимает цифру которая является ID поля типа password с которым
	необходимо провести сравнение. Типичное использование - регистрация пользователя, когда необходимо
	ввести пароль и подтверждение пароля. Для такой задачи сначала нужно создать поле типа password,
	указав этот параметр как false(по умолчанию), затем нужно сохранить ID созданного поля. Записываем в переменную
	значение свойства класса id, например: $passwordInputId = $inputForm->id; Свойство id хранит
	ID последнего созданного элемента, по этому его нужно считывать сразу после создания элемента. 
	После этого создать еще одно поле типа password и передать в этот параметр сохраненный ID первого
	поля с паролем. Если всё сделано верно то после введения пользователем пароля и подтверждения,
	в случае не совпадения паролей будет выведена ошибка для обоих полей. Текст ошибки хранится в
	параметре $passConfirmMesssage.
8:	(string)$passConfirmMesssage - строка с текстом ошибки, которая будет показываться если введенные
	пользователем пароли не совпадают. Показывается только если в параметр $passNeedСonfirm было передано
	корректное значение ID другого поля типа password.
Пример создания двух полей типа password с функцией сравнения паролей:
	$pass = $inputForm->addPasswordInput('password', true, ['placeholder'=>'Пароль'], 'Введите пароль!', 'Password', 'Некорректный пароль!');
	$passid = $inputForm->id;
	$pass2 = $inputForm->addPasswordInput('passwordConfirm', true, ['placeholder'=>'Подтверждение пароля'], 'Введите подтверждение пароля!', 'Password', 'Некорректный пароль!', $passid, 'Пароли должны совпадать');
Возвращаемые значения:
	-(bool)false - если форма не была отправлена
	-(string) - текст введенный пользователем в поле, если форма была отправлена и нет ошибок валидации, заполнения, сравнения
	-(bool)false - если форма была отправлена, в поле ничего не введено и в параметр функции $required была передана строка
	-(bool)false - если форма была отправлена, в данном поле и связанном поле есть текст, но текст не совпадает
	Первое поле возможно будет возвращать текст.
	-(bool)false - если форма была отправлена, в поле введен какой-то текст, но текст не прошел валидацию 
---------------------------------------------------------------------------------------------


Создание поля типа email
---------------------------------------------------------------------------------------------
addEmailInput($tagName, $saveFormValue=false, $tags=[], $required=false, $validate=false, $validateErrorMessage='Не корректный E-mail!')
Эта функция использует функцию addTextInput как базовую, по этому
большинство передаваемых параметров идентично с функцией addTextInput.
Принимает 1 обязательный параметр и 5 не обязательных:
1:	(string)$tagName - значение атрибута name поля ввода. Обязательный параметр.
2:	(bool)$saveFormValue - опция сохранения введенных значений после отправки формы,
	булево значение, true - для сохранения, false - значения не будут сохранятся.
3:	(array)$tags - ассоциативный массив с атрибутами и значениями, будут
	записаны как атрибуты поля, по умолчанию пустой массив.
	Пример массива ['class'=>'example'].
4:	(bool/string)$required - идентично с аналогичным параметром функции addTextInput.
5:	(bool/string)$validate - идентично с аналогичным параметром функции addTextInput.
6:	(string)$validateErrorMessage - идентично с аналогичным параметром функции addTextInput.
Пример использования: 
	$email = $inputForm->addEmailInput('userEmail', true, ['id'=>'email', 'placeholder'=>'E-mail'], 'Введите E-mail!', 'Email', 'Не корректный E-mail!');
Возвращаемые значения:
	-(bool)false - если форма не была отправлена
	-(string) - текст введенный пользователем в поле, если форма была отправлена и нет ошибок валидации и/или заполнения
	-(bool)false - если форма была отправлена, в поле ничего не введено и в параметр функции $required была передана строка
	-(bool)false - если форма была отправлена, в поле введен какой-то текст, но текст не прошел валидацию
---------------------------------------------------------------------------------------------


Создание флажка checkbox
---------------------------------------------------------------------------------------------
addCheckBox($tagName, $tags=[], $saveFormValue = false, $required = false)
Принимает 1 обязательный параметр и 3 не обязательных
1:	(string)$tagName - значение атрибута name поля ввода. Обязательный параметр.
2:	(array)$tags - ассоциативный массив с атрибутами и значениями, будут
	записаны как атрибуты флажка, по умолчанию пустой массив.
	Пример массива ['class'=>'example'].
3:	(bool)$saveFormValue - опция сохранения состояния флажка после отправки формы,
	булево значение, true - для сохранения, false - состояние не будет сохранятся.
4:	(bool/string)$required - обязательно ли поле для заполнения. Принимает булево значение false
	если флаг не обязательно включать, либо строку с текстом сообщения об ошибке заполнения (можно вставлять HTML теги).
	Так-же если передана строка, то к HTML коду флажка добавляется атрибут required (в целях отладки это 
	можно изменить передав свойству $inputForm->requiredText пустую стоку).
Пример использования: 
$chkbx = $inputForm->addCheckBox('agree', [ 'value'=>'23'], true, 'Поставь галочку');
Возвращаемые значения:
	-(bool)false - если форма не была отправлена
	-(bool)false - если форма была отправлена, но флажок не был отмечен
	-(string) - если форма была отправлена и флажок был отмечен(по умолчанию передается значение "on",
	можно передать любое значение указав его в массиве $tags. Например: ['value'=>'flagChecked'])
---------------------------------------------------------------------------------------------


Создание тега <label>
---------------------------------------------------------------------------------------------
Для создания этого тега используются две функции labelOpen и labelClose
которые соответственно открывают и закрывают этот тег. Эти функции удобно
использовать в комбинации например с флажком для создания подписи к флажку.
labelOpen ($HTMLcontent='', $tags=[])
labelClose($HTMLcontentBeforeClose = '')

Функция labelOpen принимает 2 не обязательных параметра:
1:	(string)$HTMLcontent - Строка которая будет вставлена сразу после открытия тега <label>
2:	(array)$tags - ассоциативный массив с атрибутами и значениями, будут
	записаны как атрибуты тега, по умолчанию пустой массив.
	Пример массива ['class'=>'example'].

Функция labelClose принимает 1 не обязательный параметр:
1:	(string)$HTMLcontentBeforeClose - Строка которая будет вставлена перед закрытием тега </label>
Пример использования:
	$inputForm->labelOpen('', ['class'=>'remCheckbox']);
	$chkbx = $inputForm->addCheckBox('agree', ['value'=>'23', 'checked'=>''], true, 'Поставь галочку');
	$inputForm->labelClose('<span>Я согласен с правилами портала</span>');
Возвращаемых значений нет.
---------------------------------------------------------------------------------------------


Использование radiobutton
---------------------------------------------------------------------------------------------
Работа с radiobutton реализована через две функции.
Функция addRadioButtonGroup создает группу переключателей с одинаковыми именами.
Функция addRadioToGroup добавляет переключатель в группу.
Группа переключателей будет дополнительно обрамлена в div с классом radioButtonsGroup.
addRadioButtonGroup($radioNames, $saveFormValue = true, $required = true)
addRadioToGroup($groupId, $value, $htmlBefore='', $htmlAfter='', $tags=[])

Функция addRadioButtonGroup принимает 1 обязательный параметр и 2 не обязательных:
1:	(string)$radioNames - значение будет записано в атрибут name каждого переключателя.
	Обязательный параметр.
2:	(bool)$saveFormValue - опция сохранения состояния переключателя после отправки формы,
	булево значение, true - для сохранения, false - состояние не будет сохранятся.
3:	(bool/string)$required - обязательно ли поле для заполнения. Принимает булево значение false
	если группа переключателей не обязательна для выбора, либо строку с текстом сообщения об ошибке заполнения (можно вставлять HTML теги).
	Так-же если передана строка, то к HTML коду каждого переключателя добавляется атрибут required 
	(в целях отладки это можно изменить передав свойству $inputForm->requiredText пустую стоку).
Возвращаемые значения:
	-(bool)false - если форма не была отправлена
	-(bool)false - если форма была отправлена, но ни один переключатель не был выбран
	-(string) - значение выбранного переключателя

Функция addRadioToGroup принимает 2 обязательных параметра и 3 не обязательных:
1:	(int)$groupId - обязательный параметр, принимает значение ID группы в которую нужно
	добавить переключатель
2:	(string)$value - обязательный параметр, значение будет указано в атрибуте value переключателя
3:	(string)$htmlBefore - HTML код который будет добавлен перед кодом самого переключателя
4:	(string)$htmlAfter - HTML код который будет добавлен после кода самого переключателя
5:	(array)$tags - ассоциативный массив с атрибутами и значениями, будут
	записаны как атрибуты тега, по умолчанию пустой массив.
	Пример массива ['class'=>'example'].
Возвращаемых значений нет.

Пример использования обеих функций:
	$radioGroup1 = $inputForm->addRadioButtonGroup('onetwo', true, 'Выберите один вариант!');
	$radioGroup1Id = $inputForm->id;
	$inputForm->addRadioToGroup($radioGroup1Id, 'первый', '<label>', 'первый</label>');
	$inputForm->addRadioToGroup($radioGroup1Id, 'второй', '<label>', 'второй</label>');
	$inputForm->addRadioToGroup($radioGroup1Id, 'третий', '<label>', 'третий</label>');
	$inputForm->addRadioToGroup($radioGroup1Id, 'четвертый', '<label>', 'четвертый</label>');
---------------------------------------------------------------------------------------------


Использование select
---------------------------------------------------------------------------------------------
Работа с тегом select реализована с помощью трех функций:
addSelect, addOptGroupToSelect, addOptionToSelect
Функция addSelect создает список выбора.
Функция addOptGroupToSelect создает группу пунктов выбора.
Функция addOptionToSelect добавляет пункты выбора.

addSelect ($tagName, $isMultiple = true, $saveFormValue = false, $tags=[], $required=false)
addOptGroupToSelect ($selectId, $label, $tags=[])
addOptionToSelect ($selectId, $text, $value, $tags=[], $addToOptGroupId=false)

Функция addSelect принимает 1 обязательный параметр и 4 не обязательных:
1:	(string)$tagName - значение будет записано в атрибут name тега select. Обязательный параметр.
2:	(bool)$isMultiple - включает и выключает возможность множественного выбора в списке. По умолчанию - true.
3:	(bool)$saveFormValue - опция сохранения выбора после отправки формы,
	булево значение, true - для сохранения, false - состояние не будет сохранятся.
4:	(array)$tags - ассоциативный массив с атрибутами и значениями, будут
	записаны как атрибуты тега, по умолчанию пустой массив.
	Пример массива ['class'=>'example'].
5:	(bool/string)$required - обязателен ли список для заполнения. Принимает булево значение false
	если список не обязателен для заполнения, либо строку с текстом сообщения об ошибке заполнения (можно вставлять HTML теги).
	Так-же если передана строка, то к HTML коду тега добавляется атрибут required 
	(в целях отладки это можно изменить передав свойству $inputForm->requiredText пустую стоку).
Возвращаемые значения:
	-(bool)false - если форма не была отправлена
	-(bool)false - если форма была отправлена, но ни один пункт не был выбран
	-(string) - строка с значением атрибута value выбранного пункта, при этом
	флаг $isMultiple был установлен в false
	-(array) - массив выбранных значений пунктов если флаг $isMultiple был установлен в true

Функция addOptGroupToSelect принимает 2 обязательных параметра и 1 не обязательный:
1:	(int)$selectId - ID списка, созданного функцией addSelect. Обязательный параметр.
2:	(string)$label - Название группы выбора которое будет отображаться в списке.Обязательный параметр.
3:	(array)$tags - ассоциативный массив с атрибутами и значениями, будут
	записаны как атрибуты тега, по умолчанию пустой массив.
	Пример массива ['class'=>'example'].
Возвращаемых значений нет.

Функция addOptionToSelect принимает 3 обязательных параметра и 2 не обязательных:
1:	(int)$selectId - ID списка, созданного функцией addSelect. Обязательный параметр
2:	(string)$text - строка которая будет отображаться в списке. Обязательный параметр
3:	(string)$value - значение которое будет отправляться на сервер. Обязательный параметр
4:	(array)$tags - ассоциативный массив с атрибутами и значениями, будут
	записаны как атрибуты тега, по умолчанию пустой массив.
	Пример массива ['class'=>'example'].
5:	(bool/int)$addToOptGroupId - false(по умолчанию) если пункт нужно добавить непосредственно в сам список
	либо значение ID группы, созданной функцией addOptGroupToSelect в которую поместиться
	создаваемый пункт
Возвращаемых значений нет.

Пример использования всех трех функций:

$select1 = $inputForm->addSelect('select1', true, true, [], 'Выберите что-нибудь!');
$select1Id = $inputForm->id;
$inputForm->addOptGroupToSelect($select1Id, 'Первая группа');
$select1group1Id = $inputForm->id;
$inputForm->addOptionToSelect($select1Id, 'Первый вариант', 'fg1', [], $select1group1Id);
$inputForm->addOptionToSelect($select1Id, 'Второй вариант', 'fg2', [], $select1group1Id);
$inputForm->addOptionToSelect($select1Id, 'Третий вариант', 'fg3', [], $select1group1Id);
$inputForm->addOptionToSelect($select1Id, 'Четвертый вариант', 'fg4');
$inputForm->addOptionToSelect($select1Id, 'Пятый вариант', 'ng1');
$inputForm->addOptionToSelect($select1Id, 'Шестой вариант', 'ng2');
$inputForm->addOptGroupToSelect($select1Id, 'Вторая группа');
$select1group2Id = $inputForm->id;
$inputForm->addOptionToSelect($select1Id, 'Седьмой вариант', 'sg1', [], $select1group2Id);
$inputForm->addOptionToSelect($select1Id, 'Восьмой вариант', 'sg2', [], $select1group2Id);

В результате будет создан список с двумя группами. В группе 'Первая группа' будут варианты
'Первый вариант', 'Второй вариант', 'Третий вариант'. Варианты 'Четвертый вариант',
'Пятый вариант', 'Шестой вариант' будут без группы. Варианты 'Седьмой вариант',
'Восьмой вариант' будут в группе 'Вторая группа'.
---------------------------------------------------------------------------------------------


Создание textarea
---------------------------------------------------------------------------------------------
addTextArea($tagName, $tags=[], $text='', $saveFormValue=false, $required=false, $validate=false, $validateErrorMessage='Неверные данные!')
Функция принимает 1 обязательный параметр и 6 не обязательных:
1:	(string)$tagName - значение атрибута name поля ввода. Обязательный параметр.
2:	(array)$tags - ассоциативный массив с атрибутами и значениями, будут
	записаны как атрибуты тега, по умолчанию пустой массив.
	Пример массива ['class'=>'example'].
3:	(string)$text - значение будет записано внутри textarea
4:	(bool)$saveFormValue - опция сохранения введенного текста после отправки формы,
	булево значение, true - для сохранения, false - текст не будет сохранятся.
5:	(bool/string)$required - обязательно ли поле для заполнения. Принимает булево значение false
	если поле не обязательно для заполнения, либо строку с текстом сообщения об ошибке заполнения (можно вставлять HTML теги).
	Так-же если передана строка, то к HTML коду поля добавляется атрибут required (в целях отладки это 
	можно изменить передав свойству $inputForm->requiredText пустую стоку).
6:	(bool/string)$validate - нужна ли валидация введенных значений. Принимает булево значение false
	если валидация не нужна, либо строку с названием типа валидации. Подробнее в описании соответствующего
	параметра функции addTextInput.
7:	(string)$validateErrorMessage - сообщение, которое будет показано в случае ошибки валидации (можно вставлять HTML теги).

Пример использования:
	$textarea1 = $inputForm->addTextArea('textareaOne', ['maxlength'=>'30'], '', true, 'Введите!', 'Custom', 'Не менее 10 символа и не более 30!');

Возвращает значения:
	-(bool)false - если форма не была отправлена
	-(string) - текст введенный пользователем в поле, если форма была отправлена и нет ошибок валидации и/или заполнения
	-(bool)false - если форма была отправлена, в поле ничего не введено и в параметр функции $required была передана строка
	-(bool)false - если форма была отправлена, в поле введен какой-то текст, но текст не прошел валидацию
---------------------------------------------------------------------------------------------


Создание input type="file"
---------------------------------------------------------------------------------------------
addFileInput($tagName, $tags=[], $maxFileSizeBytes=31457280, $isMultiple=true, $required=false, $saveFilesPath=false)
При создании автоматически меняется значение свойства формы encode на 'multipart/form-data'.
Функция принимает 1 обязательный параметр и 5 не обязательных:
1:	(string)$tagName - значение атрибута name тега. Обязательный параметр.
2:	(array)$tags - ассоциативный массив с атрибутами и значениями, будут
	записаны как атрибуты тега, по умолчанию пустой массив.
	Пример массива ['class'=>'example'].
3:	(int)$maxFileSizeBytes - максимальный размер загружаемых файлов, указывается в байтах (по умолчанию
	31457280 что равно 30 мегабайтам)
4:	(bool)$isMultiple - указывает возможно ли загрузка нескольких файлов за раз.
	false если разрешено загрузить лишь один файл, true если разрешено загружать несколько файлов.
5:	(bool/string)$required - обязательно ли загрузка файла. Принимает булево значение false
	если файл не обязателен для загрузки, либо строку с текстом сообщения об ошибке заполнения (можно вставлять HTML теги).
	Так-же если передана строка, то к HTML коду тега добавляется атрибут required (в целях отладки это 
	можно изменить передав свойству $inputForm->requiredText пустую стоку). Кроме этого если передана строка
	то скрипт будет проверять заполнены ли все предыдущие обязательные поля. Это значит, что файл не будет загружаться
	если есть ошибки заполнения/валидации/сравнения в других элементах формы. Ошибки проверяются последовательно в порядке
	создания элементов формы. То есть если элемент "файл" добавлен первым, а после него создано несколько обязательных
	для заполнения элементов, то ошибки в этих элементах не будут учитываться.
6:	(bool/string)$saveFilesPath - нужно ли сохранять файлы. False в случае если обработка файлов будет проводиться
	другим скриптом. Либо строка в которой указан путь для сохранения файлов. В случае если передана строка скрипт
	попытается сохранить файлы по указанному пути, но успех операции зависит от многих факторов, папка должна
	существовать, у скрипта должны быть права на запись и т.д. Данный скрипт работы с файлами крайне примитивен
	и является небольшой переделкой этого скрипта http://php.net/manual/ru/features.file-upload.post-method.php

Пример использования:
	$file1 = $inputForm->addFileInput('fileOne', ['accept'=>'image/*'], 31457280, true, 'FILE!', './uploads/');

Возвращает значения:
	-(bool)false - если форма не была отправлена
	-(bool)false - если форма была отправлена, но файлы не были загружены
	-(bool)true - если форма была отправлена, и файл/все файлы  были загружены
---------------------------------------------------------------------------------------------


Добавление простого HTML кода в код формы
---------------------------------------------------------------------------------------------
addHtml($HTML='')
Функция принимает один параметр который является строкой HTML кода.
Можно использовать для обрамления некоторых элементов каким-то кодом.
Пример использования:
	$inputForm->addHtml('<fieldset>');
	$radioGroup1 = $inputForm->addRadioButtonGroup('onetwo', true, 'Выберите один вариант!');
	$radioGroup1Id = $inputForm->id;
	$inputForm->addRadioToGroup($radioGroup1Id, 'первый', '<label>', 'первый</label>');
	$inputForm->addRadioToGroup($radioGroup1Id, 'второй', '<label>', 'второй</label>');
	$inputForm->addRadioToGroup($radioGroup1Id, 'третий', '<label>', 'третий</label>');
	$inputForm->addRadioToGroup($radioGroup1Id, 'четвертый', '<label>', 'четвертый</label>');
	$inputForm->addHtml('</fieldset>');

Возвращаемых значений нет.
---------------------------------------------------------------------------------------------


Создание кнопки <button>
---------------------------------------------------------------------------------------------
addButton($btnType, $HTMLcontent, $tags=[])
Функция принимает 1 обязательный параметр и 2 не обязательных:
1:	(string)$btnType - тип кнопки. Принимает значения "submit", "reset", "button"
2:	(string)$HTMLcontent - HTML код который будет вставлен между тегами <button>
3:	(array)$tags - ассоциативный массив с атрибутами и значениями, будут
	записаны как атрибуты тега, по умолчанию пустой массив.
	Пример массива ['class'=>'example'].

Пример использования:
	$btn1 = $inputForm->addButton('submit', '✔', ['name'=>'subm', 'value'=>'ok']);
	
Возвращает значения:
	-(string) - если в массив $tags были переданы name и value, и $btnType=submit
	возвращает значение атрибута value после отправки формы. В остальных случаях
	не возвращает ничего.
---------------------------------------------------------------------------------------------
↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑



↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
Свойства класса и общие функции.↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓


Свойство $inputForm->noErrors
---------------------------------------------------------------------------------------------
Возвращает булево значение. True если форма еще не отправлена или если форма отправлена и нет
ошибок заполнения/валидации/сравнения. False если есть ошибки заполнения/валидации/сравнения.
---------------------------------------------------------------------------------------------


Свойство $inputForm->formSended
---------------------------------------------------------------------------------------------
Возвращает булево значение. True если форма была отправлена и false если нет. 
Проверка достигается при помощи input type="hidden" который добавляется в HTML код формы.
---------------------------------------------------------------------------------------------


Функция $inputForm->showFormIdOnEveryElement($show)
---------------------------------------------------------------------------------------------
Функция принимает булево значение. False (по умолчанию) если не нужно на каждом элементе
добавлять атрибут form='formId', true если нужно. Установка значения true позволяет
отображать элементы формы за пределами тегов <form> и они не потеряют связь с формой.
---------------------------------------------------------------------------------------------


Функция $inputForm->clearAllValues()
---------------------------------------------------------------------------------------------
Ничего не принимает и не возвращает. Отчищает все элементы формы от значений, текстовые поля
становятся пустыми, переключатели и галочки выключеными, списки выбора без выбранных значений.
---------------------------------------------------------------------------------------------
↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑



↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
Функции возврата HTML кода элементов.↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
	- returnFullHtml() - возвращает строку c HTML кодом формы и всех элементов.
	- returnHtmlbyId($id) - принимает ID элемента. Возвращает строку c HTML кодом элемента.
	- formOpenHtml() - возвращает строку c HTML кодом открывающего тега <form>
	- formCloseHtml() - возвращает строку c HTML кодом скрытого элемента и закрывающего тега </form>














































