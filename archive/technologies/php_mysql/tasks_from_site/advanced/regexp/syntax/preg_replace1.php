<?php
date_default_timezone_set('Europe/Moscow');


echo '1. '.str_replace('a', '!', 'aabbaa') . '<br>'; //выведет '!!bb!!'
echo '2. '.preg_replace('#a#', '!', 'aabbaa'). '<br>'; //выведет '!!bb!!'/ #-ограничители

echo '3. '.preg_replace('#A#', '!', 'aAb'). '<br>'; //выведет 'a!b'
echo '4. '.preg_replace('#A#i', '!', 'aAb'). '<br>'; //выведет '!!b'/ i-игнорировать регистр

echo '5. '.preg_replace('#xax#', '!', 'xax xaax'). '<br>'; //выведет '! xaax'
echo '6. '.preg_replace('#123#', '!', '123 xaax'). '<br>'; //выведет '! xaax'
echo '7. '.preg_replace('#x3x#', '!', 'x3x xaax'). '<br>'; //выведет '! xaax'

//Обратите внимание на то, что регистр имеет значение:
echo '8. '.preg_replace('#A3B#', '!', 'a3b A3B'). '<br>'; //выведет 'a3b !'

echo '9. '.preg_replace('#x.x#', '!', 'xax xsx x&x x-x xaax'). '<br>'; //выведет '! ! ! ! xaax'/ .-любой символ

echo '10. '.preg_replace('#x..x#', '!', 'xax xabx'). '<br>'; //выведет 'xax !'

//плюс '+' (один и более раз), звездочка '*' (ноль и более раз) и 
//вопрос '?' (ноль или один раз, иначе говоря - может быть, а может не быть). 

echo '11. '.preg_replace('#xa+x#', '!', 'xx xax xaax xaaax xbx'). '<br>';//выведет 'xx ! ! ! xbx'
//В данном случае шаблон поиска выглядит так: буква 'x', буква 'a' один или более раз, буква 'x'. 

echo '12. '.preg_replace('#xa*x#', '!', 'xx xax xaax xaaax xbx'). '<br>';//выведет '! ! ! ! xbx'
//В данном случае шаблон поиска выглядит так: буква 'x', буква 'a' ноль или более раз, буква 'x'.
//По-другому можно сказать так: буквы 'a' или нет, или повторяется один или более раз.
//Кроме очевидного варианта xax xaax xaaax, под шаблон также попадает подстрока 'xx', 
//так как там нет буквы 'a' вообще (то есть 0 раз).
//А 'xbx' не попал, так как там нет буквы 'a', но есть буква 'b' (ее мы не разрешили). 

echo '13. '.preg_replace('#xa?x#', '!', 'xx xax xaax xbx'). '<br>';//выведет '! ! xaax xbx'
//В данном случае шаблон поиска выглядит так: 
//буква 'x', далее буква 'a' может быть или не быть, потом буква 'x'. 

//Скобки группируют несколько символов
echo '14. '.preg_replace('#x(ab)+x#', '!', 'xabx xababx xaabbx'). '<br>';//выведет '! ! xaabbx'
//В данном случае шаблон поиска выглядит так: 
//буква 'x', далее строка 'ab' один или более раз, потом буква 'x'. 

// спец символы нужно экранировать "\" чтобы они означали сами себя
echo '15. '.preg_replace('#a\+x#', '!', 'a+x ax aax aaax'). '<br>'; //выведет '! ax aax aaax'
echo '16. '.preg_replace('#a\.x#', '!', 'a.x abx azx'). '<br>'; //выведет '! abx azx'

//В качестве ограничителей могут выступать не только #, но и любые другие символы 
//(только не буквы и не цифры). Если используются скобки, тогда левый ограничитель - 
//это открывающая скобка, а правый - закрывающая: 
echo '17. '.preg_replace('&а+&', '!', 'строка'). '<br>';//ограничители - амперсанды
echo '18. '.preg_replace('(а+)', '!', 'строка'). '<br>';//ограничители - скобки

//Ограничители - решетки, амперсанд не экранируем:
echo '19. '.preg_replace('#a&b#', '!', 'a&b'). '<br>'; //выведет '!'
/*
	Ограничители - амперсанды, 
	и теперь амперсанд внутри приходится экранировать,
	иначе это вызовет ошибку PHP:
*/
echo '20. '.preg_replace('&a\&b&', '!', 'a&b'). '<br>';//выведет '!'
/*
	Являются спецсимволами: $ ^ . * + ? \ {} [] () |
	Не являются спецсимволами: @ : , ' " ; - _ = < > % # ~ `& ! / 
	Кроме того: спецсимволами будут выбранные ограничители.
	И еще: # будет спецсимволом при наличии модификатора 'x' 
	(именно маленький 'x' – он разрешает комментарии в регулярке). 
*/
//ОГРАНИЧЕНИЕ ЖАДНОСТИ
//Выведет '! e', а ожидалось '! qw x e':
echo '21. '.preg_replace('#a.+x#', '!', 'a23e4x qw x e'). '<br>'; 
/*
В данном примере шаблон поиска выглядит так: буква 'a', затем любой символ один или более раз, 
затем буква 'x'.

Однако, регулярка сработала не так, как ожидал автор - она захватила максимально возможное 
количество символов, то есть закончилась не на первом иксе 'x', а на последнем 'x'. 

Такое поведение операторов (квантификаторов) повторения называется жадностью - 
они стремятся забрать как можно больше. Жадность можно ограничить.
Делается это с помощью добавления знака '?' к оператору повторения: 
вместо жадных '+' и '*' мы напишем '+?' и '*?' - они будут не такие жадные: 
*/
echo '22. '.preg_replace('#a.+?x#', '!', 'a23e4x qw x e'). '<br>';//выведет '! qw x e'
/*
В данном примере шаблон поиска выглядит так: буква 'a', затем любой символ один или более раз 
(с ограничением жадности), затем буква 'x'.
С помощью '?' мы ограничили жадность плюсу - и теперь он ищет до первого совпадения. 
Жадность можно ограничивать всем операторам повторения, в том числе и '?', и '{}' - вот так: '??' и '{}?'. 
*/


?>
<!DOCTYPE html>
<html lang="ru">
<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1">
   <title>Регулярные выражения</title>
   
</head>
<body >
	<div class="main">
		<div class="wrapper">

		</div>
	</div>
	<div style="position: fixed; top:90%; left:80%; z-index:9; background: #f9f98c;"><a href="http://theory.phphtml.net/books/php/regular/rabota-s-regulyarnymi-vyrazeniyami-v-php-glava-1.html" target="_blank">Страница учебника</a></div>
</body>
</html>